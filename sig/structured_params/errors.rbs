# Generated from lib/structured_params/errors.rb with RBS::Inline

# rubocop:disable Style/OptionalBooleanParameter
module StructuredParams
  # Custom errors collection that handles nested attribute names
  class Errors < ActiveModel::Errors
    # Override to_hash to maintain compatibility with ActiveModel::Errors by default
    # Add structured option to get nested structure for dot-notation attributes
    # : (?bool, ?structured: false) -> Hash[Symbol, String]
    # : (?bool, structured: bool) -> Hash[Symbol, untyped]
    def to_hash: (?bool, ?structured: false) -> Hash[Symbol, String]
               | (?bool, structured: bool) -> Hash[Symbol, untyped]

    # Override as_json to support structured option
    # This maintains compatibility with ActiveModel::Errors while adding structured functionality
    # : (?{ full_messages?: bool, structured?: bool }?) -> Hash[Symbol, untyped]
    def as_json: (?{ :full_messages? => bool, :structured? => bool }?) -> Hash[Symbol, untyped]

    # Override messages to support structured option
    # This maintains compatibility with ActiveModel::Errors while adding structured functionality
    # : (?structured: bool) -> Hash[Symbol, untyped]
    def messages: (?structured: bool) -> Hash[Symbol, untyped]

    private

    # Build a hash with attribute names as keys and their error messages as values
    # This is used for to_hash(structured: true)
    # : (bool) -> Hash[Symbol, Array[String]]
    def build_attribute_messages_hash: (bool) -> Hash[Symbol, Array[String]]

    # Build a nested hash structure from flat dot-notation keys
    # Converts "address.postal_code" to {address: {postal_code: value}}
    # : (Hash[untyped, untyped], Hash[Symbol, Array[String]], ?String) -> Hash[Symbol, untyped]
    def build_nested_hash: (Hash[untyped, untyped], Hash[Symbol, Array[String]], ?String) -> Hash[Symbol, untyped]
  end
end
