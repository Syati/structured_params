# Generated from lib/structured_params/params.rb with RBS::Inline

module StructuredParams
  # Parameter model that supports structured objects and arrays
  #
  # Usage example:
  #   class UserParameter < StructuredParams::Params
  #     attribute :name, :string
  #     attribute :address, :object, value_class: AddressParameter
  #     attribute :hobbies, :array, value_class: HobbyParameter
  #     attribute :tags, :array, value_type: :string
  #   end
  class Params
    include ActiveModel::Model

    include ActiveModel::Attributes

    @errors: ::StructuredParams::Errors?

    self.@structured_attributes: Hash[Symbol, singleton(::StructuredParams::Params)]?

    # Generate permitted parameter structure for Strong Parameters
    # : () -> Array[untyped]
    def self.permit_attribute_names: () -> Array[untyped]

    # Get structured attributes and their classes
    # : () -> Hash[Symbol, singleton(::StructuredParams::Params)]
    def self.structured_attributes: () -> Hash[Symbol, singleton(::StructuredParams::Params)]

    # Determine if the specified type is a StructuredParams type
    # : (ActiveModel::Type::Value) -> bool
    private def self.structured_params_type?: (ActiveModel::Type::Value) -> bool

    # : (Hash[untyped, untyped]|::ActionController::Parameters) -> void
    def initialize: (Hash[untyped, untyped] | ::ActionController::Parameters) -> void

    # : () -> ::StructuredParams::Errors
    def errors: () -> ::StructuredParams::Errors

    # Convert structured objects to Hash and get attributes
    # : (?symbolize: false, ?compact: bool) -> Hash[String, untyped]
    # : (?symbolize: true, ?compact: bool) -> Hash[Symbol, untyped]
    def attributes: (?symbolize: false, ?compact: bool) -> Hash[String, untyped]
                  | (?symbolize: true, ?compact: bool) -> Hash[Symbol, untyped]

    private

    # Process input parameters
    # : (untyped) -> Hash[untyped, untyped]
    def process_input_parameters: (untyped) -> Hash[untyped, untyped]

    # Execute structured parameter validation
    # : () -> void
    def validate_structured_parameters: () -> void

    # Validate structured arrays
    # @rbs attr_name: Symbol
    # @rbs array_value: Array[untyped]
    # @rbs return: void
    def validate_structured_array: (Symbol attr_name, Array[untyped] array_value) -> void

    # Validate structured objects
    # @rbs attr_name: Symbol
    # @rbs object_value: ::StructuredParams::Params
    # @rbs return: void
    def validate_structured_object: (Symbol attr_name, ::StructuredParams::Params object_value) -> void

    # Format error path using dot notation (always consistent)
    # : (Symbol, Integer?) -> String
    def format_error_path: (Symbol, Integer?) -> String

    # Serialize structured values
    # : (bool, ?compact: bool) -> untyped
    def serialize_structured_value: (bool, ?compact: bool) -> untyped

    # Integrate structured parameter errors into parent errors
    # : (untyped, String) -> void
    def import_structured_errors: (untyped, String) -> void
  end
end
